# Various global variables
OUT_DIR := out
OUT_SRC := src-out
CACHE := cache
PKGNAME := $(NAME)
MANIFEST_FILE := $(shell pwd)/MANIFEST
CACHE_DIR := $(shell pwd)/$(CACHE)/

# Vulnerabilty variables defaults
NVD_CPE_PATTERN ?= cpe:2.3:*:*:$(NAME):*:*:*:*:*
NVD_MIN_VERSION ?= $(VERSION)

ifneq (,$(findstring deb,$(MAKECMDGOALS)))
ARCH ?= $(shell dpkg --print-architecture)
else
ARCH ?= $(shell uname -m)
endif

# Default Config Values
# ----------------------------------------------------------------------------
# Maintainer Information
MAINTAINER       ?= anonymous
MAINTAINER_EMAIL ?= anonymous@dev
# Package Origin Configuration
PKG_ORG ?= amk
PKG_ORIGIN ?= anonymous@dev
GPG_KEY ?=
# Repository Settings
DEB_REPO_COMPONENT ?= main

# Repositories
ifeq ($(filter $(ARCH),amd64 i386),$(ARCH))
UBU_MIRROR ?= https://archive.ubuntu.com/ubuntu/
else
UBU_MIRROR ?= https://ports.ubuntu.com/ubuntu-ports
endif
DEB_MIRROR ?= https://ftp.debian.org/debian/

# Debian Repository Configuration - only for deb targets
define DEB_REPO_CONFIG
Origin: $(PKG_ORIGIN)
Label: $(PKG_ORIGIN)
Suite: $(DIST)
Codename: $(DIST)
Version: 3.1
Architectures: $(ARCH)
Components: $(DEB_REPO_COMPONENT)
Description: Repository containing misc packages
SignWith: $(GPG_KEY)
endef

export DEB_REPO_CONFIG

# Build Directory Structure
# ----------------------------------------------------------------------------
BUILD_DIR_BASE := builddir
BUILD_DIR := $(BUILD_DIR_BASE)/$(ARCH)

# Success/Failure Markers
SUCCESS_MARKER := success.$(ARCH)
FAILURE_MARKER := failure.$(ARCH)

# Detect build environment directory
BUILDENV_DIR := $(shell \
  if [ -f ./buildenv/get_dist.sh ]; then echo ./buildenv; \
  elif [ -f ./common/buildenv/get_dist.sh ]; then echo ./common/buildenv; fi \
)

REPO_BASE_DIR := $(shell \
  if [ -d ./buildenv ] && ! [ -L ./buildenv ]; then echo "$$(pwd)/$(BUILD_DIR)/repo"; \
  elif [ -L ./buildenv ]; then echo "$$(pwd)/../$(OUT_DIR)"; \
  else echo "$$(pwd)/$(OUT_DIR)"; \
  fi \
)

ifeq ("$(DIST)", "")
  DIST := unknown
endif

DIST_OS :=       $(shell echo $(DIST) | sed 's/-backports//')
DIST_TAG  :=     $(shell $(BUILDENV_DIR)/get_dist.sh $(DIST_OS) | cut -d ':' -f 1)
DIST_CODE :=     $(shell $(BUILDENV_DIR)/get_dist.sh $(DIST_OS) | cut -d ':' -f 2)
DIST_FULL :=     $(shell $(BUILDENV_DIR)/get_dist.sh $(DIST_OS) | cut -d ':' -f 3)
DIST_CODENAME := $(shell $(BUILDENV_DIR)/get_dist.sh $(DIST_OS) | cut -d ':' -f 4)

# Repository Paths
DEB_OUT_DIR := $(REPO_BASE_DIR)/deb.$(DIST).$(ARCH)
RPM_OUT_DIR := $(REPO_BASE_DIR)/rpm.$(DIST).$(ARCH)
LOCAL_REPO_PATH := $(DEB_OUT_DIR)/raw
RPM_LOCAL_REPO_PATH := $(RPM_OUT_DIR)/raw

# Individual Package Repository Paths
INDIVIDUAL_DEB_OUT_DIR := $(REPO_BASE_DIR)/deb.$(DIST).$(ARCH)
INDIVIDUAL_DEB_LOCAL_REPO_PATH := $(INDIVIDUAL_DEB_OUT_DIR)/raw
INDIVIDUAL_RPM_OUT_DIR := $(REPO_BASE_DIR)/rpm.$(DIST).$(ARCH)
INDIVIDUAL_RPM_LOCAL_REPO_PATH := $(INDIVIDUAL_RPM_OUT_DIR)/raw

# If rebuilding Manifest, run with -c
ifeq ($(MAKECMDGOALS), manifest)
BUILD_CHECKSUM_OPTION := -c
endif

# Helpers to recover source archive or git, cache it, and store a checksum of it
WGS := $(BUILDENV_DIR)/wget_sum.sh -m $(MANIFEST_FILE) -C "$(CACHE_DIR)" $(BUILD_CHECKSUM_OPTION)
GS := $(BUILDENV_DIR)/git_sum.sh -m $(MANIFEST_FILE) -C "$(CACHE_DIR)" $(BUILD_CHECKSUM_OPTION)

# Some variables for cowbuilder
COW_DIR := /var/cache/pbuilder/


COW_NAME := $(DIST).$(shell echo $(LOCAL_REPO_PATH) | sha1sum | sed 's/\ .*//').$(ARCH).cow

ifneq ("$(DIST)", "unknown")
  COW_DIST := --distribution $(DIST_CODENAME)
endif

ifeq ($(shell id -u), 1)
  SUDO ?=
else
  SUDO ?= sudo
endif

COW_BASEPATH := $(COW_DIR)/$(COW_NAME)

ifeq ("$(DIST_CODE)", "ubu")
  COW_COMPONEN/TS := --components "main universe multiverse"
  _MIRROR := $(UBU_MIRROR)
else
  COW_COMPONENTS := --components "main contrib non-free"
  _MIRROR := $(DEB_MIRROR)
endif

ifneq ("$(DIST)", "sid")
  OTHERMIRROR := deb $(_MIRROR) $(DIST_OS)-backports main
endif

ifneq ("$(OTHERMIRROR)", "")
  OTHERMIRROR := $(OTHERMIRROR)|
endif

OTHERMIRROR := $(OTHERMIRROR)deb [trusted=yes] file://$(INDIVIDUAL_DEB_LOCAL_REPO_PATH) /
BINDMOUNT := --bindmounts "$(INDIVIDUAL_DEB_LOCAL_REPO_PATH)"
OTHERMIRROR := --othermirror "$(OTHERMIRROR)"


ifneq ("$(SKIP)", "")
# Parse the skip string to get if this specific dist/version combo must be ignored
TO_SKIP := $(shell $(BUILDENV_DIR)/skip_flag.sh -i "$(SKIP)" -d "$(DIST_CODE)" -v "$(DIST_TAG)")
endif

ifneq ("$(shell echo "$(MAKECMDGOALS)" | grep "rpm")", "")
MOCK_VERSION := $(shell mock --version)

MOCK_COMMON=$(SUDO) mock \
    -r $(DIST_FULL)-$(ARCH) \
    --no-bootstrap-image \
    --rootdir "$(COW_BASEPATH)/root/" \
    --config-opts='basedir=$(COW_BASEPATH)' \
    --config-opts='createrepo_command=$(shell realpath ./buildenv/createrepo_flocked.sh) -d -q -x *.src.rpm'

MOCK_CMD=$(MOCK_COMMON) \
    --localrepo "$(INDIVIDUAL_RPM_LOCAL_REPO_PATH)/" \
    --chain $(CURDIR)/$(BUILD_DIR)/rpm.$(DIST)/SRPMS/*$(VERSION)-$(RELEASE)*.rpm $(MOCK_BUILD_ADDITIONAL_ARGS)

CMP_VERSION := $(shell \
	[ -e "$(BUILDENV_DIR)/compare_version.sh" ] && echo "$(BUILDENV_DIR)/compare_version.sh"; \
)

endif

# Package information
SOURCE_DIR := $(BUILD_DIR)/$(PKGNAME)-$(VERSION)
SOURCE_ARCHIVE := $(BUILD_DIR)/$(PKGNAME)_$(VERSION).orig.tar.gz

# Source archive creation command
SOURCE_TAR_CMD := tar -zcf $(SOURCE_ARCHIVE) -C $$(dirname $(SOURCE_DIR)) \
    $$(basename $(SOURCE_DIR)) --owner=root --group=root && \
    rm -rf -- $$(basename $(SOURCE_DIR))/* || \
    (rm -f $(SOURCE_ARCHIVE) && \
    touch  $(SOURCE_ARCHIVE))

# Create required directories
DIRECTORIES := $(BUILD_DIR) $(OUT_DIR) $(OUT_SRC) $(CACHE) \
    $(BUILD_DIR)/deb.$(DIST) $(SOURCE_DIR) $(BUILD_DIR)/rpm.$(DIST)

UPDATE_REPO ?= true

# Detect if cowbuilder is available, otherwise use pbuilder
HAVE_COWBUILDER := $(shell which cowbuilder >/dev/null 2>&1 && echo "true" || echo "false")

ifeq ($(HAVE_COWBUILDER),true)
  BUILDER ?= cowbuilder
else
  BUILDER ?= pbuilder
endif

ifeq ($(BUILDER),cowbuilder)
  BASE_ARG ?= --basepath
else
  BASE_ARG ?= --basetgz
endif

COWBUILDER_COMMON_ARGS := \
	$(BASE_ARG) $(COW_BASEPATH) \
	--architecture $(ARCH) \
	$(BINDMOUNT)

COWBUILDER_UPDATE_ARGS := $(COWBUILDER_COMMON_ARGS)

COWBUILDER_BUILD_ARGS := $(COWBUILDER_COMMON_ARGS) \
    $(OTHERMIRROR) \
	--mirror $(_MIRROR) $(COWBUILD_BUILD_ADDITIONAL_ARGS)

COWBUILDER_CREATE_ARGS := \
	$(COWBUILDER_COMMON_ARGS) \
	--debootstrap debootstrap \
	$(COW_DIST) $(OTHERMIRROR) \
	--mirror $(_MIRROR) \
	$(COW_COMPONENTS) \
	$(COW_OPTS)
